#include "iostream.bah"
#include "flags.bah"

debug = false
out = ""

#define! getchar() char

subStr(s cpstring, min int, max int) cpstring {
    ret = []char
    for min <= max {
        c = cpstringCharAt(s, min)
        ret[len(ret)] = c
        min = min + 1
    }
    return arrAsStr(ret)
}

brainFuck(ptr int*, arr []int, f cpstring, i int, l int) {
    offset = i
    
    for i < l {
        c = cpstringCharAt(f, i)
        found = true
        if c == '>' {
            *ptr = *ptr + 1
        } else if c == '<' {
            *ptr = *ptr - 1
        } else if c == '+' {
            arr[*ptr] = arr[*ptr] + 1
        } else if c == '-' {
            arr[*ptr] = arr[*ptr] - 1
        } else if c == '.' {
            if debug == true {
                out = out + charToString(<char>arr[*ptr])
            } else {
                print(charToString(<char>arr[*ptr]))
            }
        } else if c == ',' {
            s = stdinput(2)
            arr[*ptr] = <int>cpstringCharAt(s, 0)
        } else if c == '[' {
                nbBracks = 1
                i = i + 1
                j = i
                for i < l {
                    c = cpstringCharAt(f, i)
                    if c == '[' {
                        nbBracks = nbBracks + 1
                    } else if c == ']' {
                        nbBracks = nbBracks - 1
                    }
                    if nbBracks == 0 {
                        break
                    }
                    i = i + 1
                }
            for arr[*ptr] != 0 {
                brainFuck(ptr, arr, f, j, i)
            }
        } else {
            found = false
        }
        if found == true && debug == true {
            realI = i
            pos = realI
            starts = realI
            ends = realI
            for starts > 0 {
                c = cpstringCharAt(f, starts)
                if c == <char>10 {
                    starts = starts + 1
                    break
                }
                starts = starts - 1
            }
            lf = strlen(f)
            for ends < lf {
                c = cpstringCharAt(f, ends)
                if c == <char>10 {
                    ends = ends - 1
                    break
                }
                ends = ends + 1
            }
            currentLine = subStr(f, starts, ends)
            println("\033c\033[0;0H======READER======\n"+currentLine)
            tab = ""
            j=0; for j < pos - starts {
                tab = tab + " "
                j = j + 1
            }
            tab = tab + "^"
            println(tab)
            
            println("======BUFFER======\n")
            buff = "["
            indexOffset = 0
            j=0; for j < len(arr) {
                if j == *ptr {
                    indexOffset = strlen(buff)
                }
                buff = buff + intToStr(arr[j])
                j = j + 1
                if j < len(arr) {
                    buff = buff + ", "
                }
            }
            buff = buff + "]"
            println(buff)
            tab = ""
            j=0; for j < indexOffset {
                tab = tab + " "
                j = j + 1
            }
            tab = tab + "^"
            println(tab)
            println("======OUTPUT======\n"+out)
            getchar()
        }

        if *ptr < 0 {
            panic("Index cannot be less than 0.")
        }

        i = i + 1
    }
}


main(args []cpstring) int {
    flags = flags{}
    flags.addBool("debug", "Turn debug mode on.")
    flags.parse(args)

    debug = flags.isSet("debug") == 1

    fm = fileMap{}
    f = fm.open(args[1])
    fm.close()

    ptr = 0
    arr = []int

    brainFuck(&ptr, arr, f, 0, strlen(f))


    return 0
}